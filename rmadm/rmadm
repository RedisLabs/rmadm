#!/usr/bin/env python

import requests
import platform
import click
import os
import json

MODULES_BASE_URL = "https://s3.amazonaws.com/redismodules"
MODULE_FILE_TEMPLATE = "{name}.{os}-{arch}.{version}.zip"
ARCHITECTURE = platform.machine()
OS = platform.system()


def format_module_name(module, version='latest', os = OS):

    return MODULE_FILE_TEMPLATE.format(name=module, os=os, arch=ARCHITECTURE, version=version)


def format_url(config, resource, id=None):

    return '{}/v1/{}'.format(config.rl_api_host, 
                resource if id is None else '{}/{}'.format(resource, id))


def rl_auth(config):
    return requests.auth.HTTPBasicAuth(config.rl_user, config.rl_password)


def get_db_status(config, db_name):
    options = {
        'name': db_name
    }

    resp = requests.post(format_url(config, 'bdbs'), json=options, auth=rl_auth(config), verify=False)
    if resp.status_code != 200:
        raise RuntimeError("Error: {}".format(resp.text))
    return resp.json()

def create_database(config, db_name, num_shards, max_memory, replication, modules, modules_args):

    options = {
        'name': db_name,
        'replication': bool(replication),
        'sharding': True,
        'shards_count': int(num_shards),
        'version': '4.0',
        'memory_size': int(max_memory),
        'type': 'redis',
        'module_list': list(modules),
        'module_list_args': list(modules_args) if modules_args else [],
        'shards_placement': 'sparse',
        'shard_key_regex': [{'regex': '.*{(?<tag>.*)}.*'}, {'regex': '(?<tag>.*)'}]
    }

    
    resp = requests.post(format_url(config, 'bdbs'), json=options, auth=rl_auth(config), verify=False)
    if resp.status_code != 200:
        raise RuntimeError("Error: {}".format(resp.text))
    return resp.json()

def download_file(url, outfile):
    """
    Download a file directly from url and write it to disk
    """
    print ("Downloading {}...".format(url))
    resp = requests.get(url)
    if resp.status_code != 200:
        raise RuntimeError("Error downloading {}: {}".format(url, resp.text))

    with open(outfile, 'wb+') as fp:
        fp.write(resp.content)
    return outfile



    

def download_module(module, version):
    """
    Download a module's RAMP package from http
    """

    mod_file = format_module_name(module, version=version)
    
    # s3 module download URL - no need for s3cmd or boto
    url = '{}/{}/{}'.format(MODULES_BASE_URL, module, mod_file)
    download_file(url, mod_file)
    return mod_file


def upgrade_module(config, bdb_uid, module_uid):
    # overrides bdb's module list with the one provided.
    # TODO: retrieve BDB's module list and update instead of overriding.

    options = {
        'module_list': [module_uid]
    }

    url = format_url(config, 'modules/upgrade/bdb',bdb_uid)
    resp = requests.post(url, json=options, auth=rl_auth(config), verify=False)
    if resp.status_code != 200:
        raise RuntimeError("Error: {}".format(resp.text))

    return 'OK'

def deploy_module(config, module, version, file_name=None):
    """
    Upload a module file to the cluster and print its uid. 
    If file_name is set, we do not try to download or extrapolate the file name, 
    but rather just take it as input
    """
    
    mod_file = file_name
    
    if mod_file is None:
        mod_file = format_module_name(module, version=version)
    if not os.path.isfile(mod_file):

        if file_name is None:
            print("File {} does not exist, downloading it...".format(mod_file))
            download_module(module, version)
        else:
            # this is the case when the user gave an explicit file 
            raise RuntimeError("File {} not found".format(file_name))

    with open(mod_file, 'rb') as fp:
        print("Deploying module to cluster...")
        resp = requests.post(format_url(config, 'modules'),  auth=rl_auth(config),
                             files={'module': (mod_file, fp, 'application/zip')}, 
                             verify=False)
        if resp.status_code != 200:
            raise RuntimeError("Error uploading module: " + resp.text)
        
       
        return resp.json()['uid']

def get_modules(config):
    url = format_url(config, "modules")
    resp = requests.get(url,  auth=rl_auth(config), verify=False)
    if resp.status_code != 200:
        raise RuntimeError("Error getting module info: " + resp.text)

    return resp.json()


    

class Config(object):

    def __init__(self):
        self.rl_api_host = 'https://127.0.0.1:9443/'
        self.rl_user = None
        self.rl_password = None

def ok(msg='OK'):
    click.secho(msg, fg='green')
def err(msg):
    click.secho(msg, err=True, fg='red')


@click.group()
@click.pass_obj
def cli(config):
    pass

@cli.group()
@click.option('--rl_user', prompt='Redis Enterprise Login Email ($RL_USER)', envvar = 'RL_USER', default = 'user@example.com', 
              help='Redis Enterprise Login Email ($RL_USER)')
@click.option('--rl_password', prompt='Redis Enterprise Password ($RL_PASS)', hide_input=True, envvar = 'RL_PASS', 
              help='Redis Enterprise Password ($RL_PASS)')
@click.option('--rl_host', prompt='Redis Enterprise API Host ($RL_HOST)', envvar = 'RL_HOST', default='https://127.0.0.1:9443', 
              help='Redis Enterprise API Host ($RL_HOST)')
@click.pass_obj              
def cluster(config, rl_user , rl_password, rl_host):
    """
    Cluster Commands: [create_db|upgrade|upload]
    """
    
    config.rl_user = rl_user
    config.rl_password = rl_password
    config.rl_api_host = rl_host

@cli.command()
@click.argument('module')
@click.argument('version', default='latest')
def download(module, version):
    """
    Download a module's RAMP package from http
    """
    ok(download_module(module, version))


@cluster.command()
@click.argument('module')
@click.argument('version', default='latest')
@click.option('--file', default=None, help='Upload module from a local file')
@click.pass_obj              
def upload(config, module, version, file):
    """
    Upload a module package file to the cluster
    """

    uid = deploy_module(config, module, version, file)
    ok("Module UID: {}".format(uid))

@cluster.command()
@click.argument('module')
@click.argument('version', default='latest')
@click.option('--bdb', default=1, help='BDB Id to upgrade the module on')
@click.option('--file', default=None, help='Upload module from a local file')
@click.pass_obj              
def upgrade(config, module, version, bdb, file):
    """
    Upgrade a module on an existing BDB using a new module version
    """

    uid = deploy_module(config, module, version, file)
    #print("Module UID: {}".format(uid))
    ok(upgrade_module(config, bdb, uid))


MODULE_DEFAULT_ARGS = {
    'rscoordinator': 'PARTITIONS {}',
    
}

@cluster.command()
@click.argument('module', required=True)
@click.option('--version', default='latest', help='Module Version')
@click.option('--module_args', default=None, help='Module Configuration Argument List')
@click.option('--db', prompt = 'Database Name', default='mydb', help='Database Name')
@click.option('--shards', prompt = 'Number of Redis Shards', default=5, help='Number of Redis Shards')
@click.option('--maxmemory', prompt='Database Memory Limit (in GB)', default='4', help='Database Memory Limit (in GB)')
@click.option('--replication',is_flag=True, default=False, prompt='Enable Replication', help='If set, replication is enabled')
@click.option('--file', default=None, help='Upload module from a local file')
@click.pass_obj
def create_db(config, module, version, module_args, db, shards, maxmemory, replication, file):
    """
    Create a new database with the given module. By default we download the latest version
    """
    if module_args is None:
        module_args = click.prompt('Custom Module Args', default=MODULE_DEFAULT_ARGS.get(module, '').format(shards) )

    uid = deploy_module(config, module, version, file)
    ok("Module UID: {}".format(uid))
    click.secho("Creating db...", color='orange')
    ret = create_database(config, db, shards, int(maxmemory)*(1024*1024*1024), replication, [uid], [module_args])
    print(json.dumps(ret, indent=2))
    
@cluster.command()
@click.argument('module', required=False, default=None)
@click.pass_obj
def list_modules(config, module):
    """
    List available modules and versions
    """

   
    modules = get_modules(config)
    
    fmt = '| {:<16}| {:<16}| {:<16}'
    click.echo('\n' + '-'*80)
    click.echo(fmt.format('Module', 'Version', 'UID'))
    click.echo('-'*80)
    for mod in modules:
        if module and mod['module_name'] != module:
            continue
        click.echo(fmt.format(mod['module_name'], mod['version'], mod['uid'])) 
    click.echo('-'*80)


if __name__ == '__main__':
    cli(obj=Config())

